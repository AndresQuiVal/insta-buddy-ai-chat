
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.38.4'

interface WebhookEntry {
  id: string;
  time: number;
  messaging?: MessagingEvent[];
  changes?: ChangeEvent[];
}

interface MessagingEvent {
  sender: { id: string };
  recipient: { id: string };
  timestamp: number;
  message?: {
    mid: string;
    text: string;
    attachments?: any[];
  };
}

interface ChangeEvent {
  field: string;
  value: {
    from: { id: string };
    item: string;
    created_time: number;
    verb: string;
    messaging?: MessagingEvent[];
  };
}

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Verificaci√≥n del webhook
    if (req.method === 'GET') {
      const url = new URL(req.url)
      const mode = url.searchParams.get('hub.mode')
      const token = url.searchParams.get('hub.verify_token')
      const challenge = url.searchParams.get('hub.challenge')

      console.log('üîç Webhook verification:', { mode, token, challenge })

      const verifyToken = Deno.env.get('INSTAGRAM_VERIFY_TOKEN')
      
      if (mode === 'subscribe' && token === verifyToken) {
        console.log('‚úÖ Webhook verified successfully')
        return new Response(challenge, {
          status: 200,
          headers: { 'Content-Type': 'text/plain', ...corsHeaders }
        })
      } else {
        console.log('‚ùå Webhook verification failed')
        return new Response('Forbidden', { 
          status: 403,
          headers: corsHeaders
        })
      }
    }

    // Procesar webhooks POST
    if (req.method === 'POST') {
      const body = await req.json()
      console.log('üì® Instagram webhook received:', JSON.stringify(body, null, 2))

      // Inicializar cliente Supabase
      const supabaseUrl = Deno.env.get('SUPABASE_URL')!
      const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
      const supabase = createClient(supabaseUrl, supabaseServiceKey)

      if (body.object === 'instagram') {
        for (const entry of body.entry as WebhookEntry[]) {
          console.log(`üîÑ Processing entry ${entry.id}`)

          // Procesar mensajes directos
          if (entry.messaging) {
            for (const event of entry.messaging) {
              await processMessagingEvent(supabase, event)
            }
          }

          // Procesar cambios en la p√°gina
          if (entry.changes) {
            for (const change of entry.changes) {
              if (change.field === 'messages' && change.value.messaging) {
                for (const event of change.value.messaging) {
                  await processMessagingEvent(supabase, event)
                }
              }
            }
          }
        }
      }

      return new Response(JSON.stringify({ status: 'success' }), {
        status: 200,
        headers: { 'Content-Type': 'application/json', ...corsHeaders }
      })
    }

    return new Response('Method not allowed', { 
      status: 405,
      headers: corsHeaders
    })
  } catch (error) {
    console.error('‚ùå Webhook error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { 'Content-Type': 'application/json', ...corsHeaders }
    })
  }
})

async function processMessagingEvent(supabase: any, event: MessagingEvent) {
  try {
    console.log('üìù Processing messaging event:', event)

    if (!event.message || !event.message.text) {
      console.log('‚è≠Ô∏è Skipping event without text message')
      return
    }

    const messageData = {
      instagram_message_id: event.message.mid,
      sender_id: event.sender.id,
      recipient_id: event.recipient.id,
      message_text: event.message.text,
      message_type: 'received',
      timestamp: new Date(event.timestamp).toISOString(),
      is_read: false,
      raw_data: {
        webhook_data: event,
        received_at: new Date().toISOString(),
        source: 'instagram_webhook'
      }
    }

    console.log('üíæ Saving message to database:', messageData)

    // Verificar si el mensaje ya existe
    const { data: existingMessage } = await supabase
      .from('instagram_messages')
      .select('id')
      .eq('instagram_message_id', event.message.mid)
      .single()

    if (existingMessage) {
      console.log('‚è≠Ô∏è Message already exists, skipping')
      return
    }

    // Guardar el mensaje
    const { data, error } = await supabase
      .from('instagram_messages')
      .insert(messageData)

    if (error) {
      console.error('‚ùå Error saving message:', error)
      throw error
    }

    console.log('‚úÖ Message saved successfully:', data)

    // üî• AN√ÅLISIS COMPLETO Y RESPUESTA ESTRAT√âGICA
    await handleIntelligentConversationAnalysis(supabase, event.sender.id, event.message.text)

  } catch (error) {
    console.error('‚ùå Error processing messaging event:', error)
    throw error
  }
}

async function handleIntelligentConversationAnalysis(supabase: any, senderId: string, currentMessage: string) {
  try {
    console.log('üß† INICIANDO AN√ÅLISIS COMPLETO DE CONVERSACI√ìN')
    console.log(`üë§ Sender ID: ${senderId}`)
    console.log(`üí¨ Mensaje actual: "${currentMessage}"`)

    // 1. OBTENER HISTORIAL COMPLETO DE CONVERSACI√ìN ORDENADO
    console.log('üìö Obteniendo HISTORIAL COMPLETO...')
    const { data: allMessages, error: messagesError } = await supabase
      .from('instagram_messages')
      .select('*')
      .or(`sender_id.eq.${senderId},recipient_id.eq.${senderId}`)
      .order('timestamp', { ascending: true })

    if (messagesError) {
      console.error('‚ùå Error obteniendo mensajes:', messagesError)
      await sendFallbackResponse(supabase, senderId, currentMessage)
      return
    }

    const conversationHistory = allMessages || []
    console.log(`üìù HISTORIAL ENCONTRADO: ${conversationHistory.length} mensajes`)

    // 2. OBTENER CARACTER√çSTICAS IDEALES
    console.log('üéØ Obteniendo caracter√≠sticas ideales...')
    const { data: idealTraitsData, error: traitsError } = await supabase
      .from('ideal_client_traits')
      .select('*')
      .eq('enabled', true)
      .order('position')

    if (traitsError || !idealTraitsData || idealTraitsData.length === 0) {
      console.log('‚ö†Ô∏è No hay caracter√≠sticas configuradas')
      await sendFallbackResponse(supabase, senderId, currentMessage)
      return
    }

    console.log('‚úÖ Caracter√≠sticas cargadas:', idealTraitsData.map(t => t.trait))

    // 3. CONSTRUIR HISTORIAL PARA AN√ÅLISIS
    const fullConversation = conversationHistory
      .map(msg => `${msg.message_type === 'received' ? 'Usuario' : 'IA'}: ${msg.message_text}`)
      .join('\n')

    console.log('üí≠ CONVERSACI√ìN COMPLETA:')
    console.log(fullConversation)

    // 4. AN√ÅLISIS ESTRAT√âGICO BASADO EN TODA LA CONVERSACI√ìN
    const analysis = await analyzeFullConversation(fullConversation, idealTraitsData)
    console.log('üìä AN√ÅLISIS COMPLETADO:', analysis)

    // 5. GUARDAR AN√ÅLISIS
    if (analysis.matchPoints > 0) {
      await saveProspectAnalysis(supabase, senderId, analysis, conversationHistory.length)
    }

    // 6. GENERAR RESPUESTA INTELIGENTE BASADA EN CONTEXTO COMPLETO
    const intelligentResponse = await generateContextualResponse(
      currentMessage,
      fullConversation,
      analysis,
      idealTraitsData,
      conversationHistory
    )

    console.log('ü§ñ RESPUESTA GENERADA:', intelligentResponse)

    // 7. ENVIAR RESPUESTA
    await sendResponseWithDelay(supabase, senderId, intelligentResponse)

  } catch (error) {
    console.error('‚ùå Error en an√°lisis completo:', error)
    await sendFallbackResponse(supabase, senderId, currentMessage)
  }
}

async function analyzeFullConversation(conversationText: string, idealTraits: any[]): Promise<any> {
  console.log('üîç ANALIZANDO CONVERSACI√ìN COMPLETA')
  
  const text = conversationText.toLowerCase()
  
  // Mapa expandido de palabras clave
  const keywordMap: Record<string, string[]> = {
    "Interesado en nuestros productos o servicios": [
      "me interesa", "me interesan", "interesado", "interesada", "quiero saber",
      "informaci√≥n", "detalles", "precio", "costo", "cotizaci√≥n", "cu√°nto cuesta",
      "me gusta", "me encanta", "necesito", "busco", "requiero", "quiero",
      "producto", "servicio", "oferta", "promoci√≥n", "paquete", "plan",
      "crucero", "cruceros", "viaje", "viajes", "tour", "excursi√≥n", "vacaciones",
      "disfrutar", "conocer", "explorar", "destino", "aventura"
    ],
    "Tiene presupuesto adecuado para adquirir nuestras soluciones": [
      "presupuesto", "dinero", "pago", "pagar", "precio", "costo", "inversi√≥n",
      "puedo pagar", "tengo dinero", "dispongo", "cuento con", "tarjeta",
      "efectivo", "financiamiento", "cr√©dito", "mil", "miles", "pesos", "d√≥lares",
      "vale la pena", "invertir", "gastar", "econ√≥mico", "caro", "barato"
    ],
    "Est√° listo para tomar una decisi√≥n de compra": [
      "decidido", "listo", "preparado", "comprar", "reservar", "confirmar",
      "ahora", "hoy", "ya", "pronto", "inmediato", "urgente", "cuando",
      "perfecto", "de acuerdo", "acepto", "s√≠", "claro", "adelante", "vamos"
    ],
    "Se encuentra en nuestra zona de servicio": [
      "vivo", "estoy", "ubicado", "direcci√≥n", "ciudad", "zona", "regi√≥n",
      "m√©xico", "guadalajara", "monterrey", "cdmx", "env√≠o", "entrega",
      "cerca", "lejos", "local", "nacional"
    ]
  }
  
  const metTraits: string[] = []
  
  idealTraits.forEach((trait) => {
    const keywords = keywordMap[trait.trait] || []
    
    let matchFound = false
    for (const keyword of keywords) {
      if (text.includes(keyword)) {
        matchFound = true
        break
      }
    }
    
    console.log(`   üéØ "${trait.trait}": ${matchFound ? '‚úÖ S√ç' : '‚ùå NO'}`)
    
    if (matchFound) {
      metTraits.push(trait.trait)
    }
  })
  
  return {
    matchPoints: metTraits.length,
    metTraits
  }
}

async function generateContextualResponse(
  currentMessage: string,
  fullConversation: string,
  analysis: any,
  idealTraits: any[],
  conversationHistory: any[]
): Promise<string> {
  
  const { matchPoints, metTraits } = analysis
  const totalTraits = idealTraits.length
  const lowerCurrentMessage = currentMessage.toLowerCase()
  
  console.log(`ü§ñ Generando respuesta contextual para ${matchPoints}/${totalTraits} caracter√≠sticas`)
  console.log(`üì© Mensaje actual: "${currentMessage}"`)
  
  // RESPONDER ESPEC√çFICAMENTE AL MENSAJE ACTUAL
  
  // Si pregunta sobre conversaci√≥n anterior
  if (lowerCurrentMessage.includes('le√≠ste mi conversaci√≥n') || 
      lowerCurrentMessage.includes('leiste mi conversacion') ||
      lowerCurrentMessage.includes('de lo que hemos hablado') || 
      lowerCurrentMessage.includes('conversaci√≥n anterior')) {
    
    if (matchPoints === 0) {
      return "Claro, he visto que nos estamos conociendo. Me contabas sobre ti. ¬øQu√© tipo de actividades te emocionan m√°s?"
    } else if (matchPoints === 1) {
      return "S√≠, claro que la he le√≠do. Veo que tienes inter√©s en ciertas cosas. ¬øHas estado ahorrando para algo especial √∫ltimamente?"
    } else if (matchPoints === 2) {
      return "Por supuesto, he revisado nuestra conversaci√≥n. Me parece que tienes buen criterio. ¬øEres de las personas que cuando algo les convence act√∫an r√°pido?"
    } else if (matchPoints >= 3) {
      return "Claro que s√≠, he le√≠do todo lo que me has contado. Me da mucha confianza platicar contigo. ¬øTe gustar√≠a que habl√°ramos por tel√©fono?"
    }
  }

  // Si pregunta nombre
  if (lowerCurrentMessage.includes('como te llamas') || 
      lowerCurrentMessage.includes('c√≥mo te llamas') ||
      lowerCurrentMessage.includes('cu√°l es tu nombre') ||
      lowerCurrentMessage.includes('cual es tu nombre') ||
      lowerCurrentMessage.includes('quien eres') ||
      lowerCurrentMessage.includes('qui√©n eres')) {
    
    if (matchPoints === 0) {
      return "Soy Mar√≠a, asesora de viajes. ¬øQu√© tipo de experiencias te emocionan m√°s cuando piensas en viajar?"
    } else if (matchPoints === 1) {
      const pendingTrait = idealTraits.find(trait => !metTraits.includes(trait.trait))
      if (pendingTrait?.trait.includes('presupuesto')) {
        return "Soy Mar√≠a, encantada. ¬øHas estado ahorrando para algo especial √∫ltimamente?"
      } else if (pendingTrait?.trait.includes('decisi√≥n')) {
        return "Soy Mar√≠a. ¬øEres de las personas que cuando algo les convence act√∫an r√°pido?"
      } else {
        return "Soy Mar√≠a. ¬øDe qu√© ciudad me escribes?"
      }
    } else if (matchPoints >= 2) {
      return "Soy Mar√≠a. Me da la impresi√≥n de que tenemos mucho en com√∫n. ¬øTe gustar√≠a que platic√°ramos por tel√©fono?"
    }
  }
  
  // Si saluda
  if (lowerCurrentMessage.includes('hola') || 
      lowerCurrentMessage.includes('buenos') ||
      lowerCurrentMessage.includes('buenas')) {
    
    // Verificar si ya salud√≥ antes
    const previousGreetings = conversationHistory.filter(msg => 
      msg.message_type === 'received' && 
      (msg.message_text.toLowerCase().includes('hola') || msg.message_text.toLowerCase().includes('buenos'))
    )
    
    if (previousGreetings.length > 1) {
      if (matchPoints === 0) {
        return "¬°Qu√© gusto verte de nuevo! ¬øQu√© tipo de experiencias te hacen sentir m√°s emocionado?"
      } else if (matchPoints < totalTraits) {
        return "¬°Hola otra vez! ¬øEn qu√© m√°s te puedo ayudar?"
      } else {
        return "¬°Hola! Me encanta que sigas aqu√≠. ¬øCu√°ndo podr√≠amos hablar por tel√©fono?"
      }
    } else {
      return "¬°Hola! Soy Mar√≠a, asesora de viajes. ¬øQu√© tipo de aventuras te emocionan m√°s?"
    }
  }

  // Si dice "How" (ingl√©s)
  if (lowerCurrentMessage.trim() === 'how') {
    return "¬°Hola! Soy Mar√≠a, asesora de viajes. ¬øQu√© tipo de experiencias te emocionan m√°s?"
  }
  
  // ESTRATEGIA BASADA EN PROGRESO
  if (matchPoints === 0) {
    // Primer contacto - descubrir primera caracter√≠stica
    const responses = [
      "¬øQu√© tipo de experiencias te hacen sentir m√°s emocionado?",
      "¬øCu√°les son tus actividades favoritas para relajarte?",
      "¬øHay algo que hayas estado queriendo hacer hace tiempo?"
    ]
    return responses[Math.floor(Math.random() * responses.length)]
  } 
  
  if (matchPoints < totalTraits) {
    // Filtrado activo - buscar siguiente caracter√≠stica
    const pendingTrait = idealTraits.find(trait => !metTraits.includes(trait.trait))
    
    if (pendingTrait?.trait.includes('presupuesto')) {
      return "Me parece muy bien. ¬øHas estado ahorrando para algo especial?"
    } else if (pendingTrait?.trait.includes('decisi√≥n')) {
      return "Perfecto. ¬øEres de los que cuando algo les convence no dudan en actuar?"
    } else if (pendingTrait?.trait.includes('zona')) {
      return "Excelente. ¬øDe qu√© parte del pa√≠s me escribes?"
    } else {
      return "Genial. ¬øQu√© otros planes tienes para este a√±o?"
    }
  } 
  
  // Cliente ideal - buscar contacto
  const contactResponses = [
    "¬°Incre√≠ble! Tenemos mucho en com√∫n. ¬øTe gustar√≠a que platic√°ramos por tel√©fono?",
    "¬°Perfecto! Creo que tengo ideas que te van a encantar. ¬øCu√°ndo podr√≠amos hablar?",
    "¬°Genial! Me parece que podr√≠amos hacer algo incre√≠ble juntos. ¬øHablamos por WhatsApp?"
  ]
  
  return contactResponses[Math.floor(Math.random() * contactResponses.length)]
}

async function saveProspectAnalysis(supabase: any, senderId: string, analysis: any, messageCount: number) {
  try {
    const analysisData = {
      sender_id: senderId,
      match_points: analysis.matchPoints,
      met_traits: analysis.metTraits,
      last_analyzed_at: new Date().toISOString(),
      message_count: messageCount,
      analysis_data: {
        timestamp: new Date().toISOString(),
        intelligent_analysis: true,
        source: 'webhook_intelligent'
      }
    }

    await supabase
      .from('prospect_analysis')
      .upsert(analysisData, { 
        onConflict: 'sender_id',
        ignoreDuplicates: false 
      })

    console.log('‚úÖ An√°lisis guardado exitosamente')
  } catch (error) {
    console.error('‚ùå Error guardando an√°lisis:', error)
  }
}

async function sendResponseWithDelay(supabase: any, senderId: string, messageText: string) {
  try {
    // Obtener configuraci√≥n de delay
    const { data: settings } = await supabase
      .from('user_settings')
      .select('ai_delay')
      .limit(1)

    const delay = (settings && settings.length > 0 ? settings[0].ai_delay : 3) * 1000
    console.log(`‚è∞ Esperando ${delay}ms antes de enviar respuesta...`)
    
    await new Promise(resolve => setTimeout(resolve, delay))

    const success = await sendInstagramMessage(senderId, messageText)
    
    if (success) {
      // Guardar mensaje enviado
      await supabase
        .from('instagram_messages')
        .insert({
          instagram_message_id: `intelligent_${Date.now()}_${Math.random()}`,
          sender_id: 'ai_intelligent_assistant',
          recipient_id: senderId,
          message_text: messageText,
          message_type: 'sent',
          timestamp: new Date().toISOString(),
          raw_data: {
            ai_generated: true,
            intelligent_response: true,
            source: 'webhook_intelligent_response'
          }
        })

      console.log('‚úÖ Respuesta inteligente enviada y guardada exitosamente')
    }

  } catch (error) {
    console.error('‚ùå Error en sendResponseWithDelay:', error)
  }
}

async function sendFallbackResponse(supabase: any, senderId: string, currentMessage: string) {
  const lowerMessage = currentMessage.toLowerCase()
  
  let response = "¬°Hola! Soy Mar√≠a, asesora de viajes. ¬øQu√© tipo de experiencias te emocionan m√°s?"
  
  if (lowerMessage.includes('como te llamas') || lowerMessage.includes('c√≥mo te llamas')) {
    response = "Soy Mar√≠a, asesora de viajes. ¬øQu√© tipo de aventuras disfrutas?"
  } else if (lowerMessage.includes('hola')) {
    response = "¬°Hola! Soy Mar√≠a. ¬øQu√© actividades te hacen sentir m√°s emocionado?"
  } else if (lowerMessage.includes('le√≠ste mi conversaci√≥n') || lowerMessage.includes('leiste mi conversacion')) {
    response = "Claro, he visto que nos estamos conociendo. ¬øQu√© tipo de experiencias te emocionan?"
  }
  
  await sendResponseWithDelay(supabase, senderId, response)
}

async function sendInstagramMessage(recipientId: string, messageText: string): Promise<boolean> {
  try {
    const accessToken = Deno.env.get('INSTAGRAM_ACCESS_TOKEN')
    
    if (!accessToken) {
      console.error('‚ùå No hay token de acceso de Instagram configurado')
      return false
    }

    const messagePayload = {
      recipient: {
        id: recipientId
      },
      message: {
        text: messageText
      }
    }

    console.log('üì§ Enviando mensaje a Instagram:', messagePayload)

    const response = await fetch(`https://graph.facebook.com/v19.0/me/messages?access_token=${accessToken}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(messagePayload)
    })

    const responseData = await response.json()
    
    if (!response.ok) {
      console.error('‚ùå Error enviando mensaje a Instagram:', responseData)
      return false
    }

    console.log('‚úÖ Mensaje enviado exitosamente a Instagram')
    return true

  } catch (error) {
    console.error('‚ùå Error en sendInstagramMessage:', error)
    return false
  }
}
