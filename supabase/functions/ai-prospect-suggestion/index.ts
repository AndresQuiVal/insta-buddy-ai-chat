
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { conversation, prospect_name, openai_api_key, ideal_traits } = await req.json()

    if (!openai_api_key) {
      return new Response(
        JSON.stringify({ error: 'OpenAI API key is required' }),
        { 
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      )
    }

    if (!conversation) {
      return new Response(
        JSON.stringify({ error: 'Conversation is required' }),
        { 
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      )
    }

    console.log('üéØ Generando sugerencia de ACCI√ìN para:', prospect_name)
    console.log('üìù Conversaci√≥n:', conversation)
    console.log('üéØ Caracter√≠sticas recibidas:', ideal_traits)

    // Crear prompt espec√≠fico para ACCIONES ESTRAT√âGICAS
    let systemPrompt = `Eres un experto coach en ventas consultivas que ayuda a vendedores a decidir el siguiente paso estrat√©gico con sus prospectos de Instagram.

TU TRABAJO: Analizar la conversaci√≥n y sugerir QU√â ACCI√ìN debe tomar la persona para avanzar org√°nicamente hacia una llamada o conseguir el WhatsApp.

CONTEXTO IMPORTANTE:
- NO generes mensajes exactos, sino ACCIONES/ESTRATEGIAS espec√≠ficas
- La conversaci√≥n debe fluir de manera org√°nica, sin presionar
- El objetivo final es agendar una llamada o conseguir el n√∫mero de WhatsApp
- Cada acci√≥n debe ser un paso l√≥gico hacia ese objetivo

TIPOS DE ACCIONES QUE PUEDES SUGERIR:
üì± "Env√≠a un mensaje preguntando sobre [tema espec√≠fico] para conocer mejor sus necesidades"
üéØ "Comparte un caso de √©xito similar a su situaci√≥n para generar m√°s inter√©s"
üìä "Haz una pregunta espec√≠fica sobre [X] para calificar si es tu cliente ideal"
‚è∞ "Es el momento perfecto para sugerir una llamada r√°pida de 15 minutos"
üí¨ "Prop√≥n cambiar la conversaci√≥n a WhatsApp para mayor comodidad"
üîç "Indaga m√°s sobre [tema] antes de hacer cualquier propuesta"
‚úã "Dale espacio, ha mostrado inter√©s pero necesita tiempo para procesar"
üéÅ "Ofrece valor adicional (recurso/tip) relacionado con lo que mencion√≥"`;

    // Si hay caracter√≠sticas configuradas, a√±adirlas al prompt
    if (ideal_traits && ideal_traits.length > 0) {
      const enabledTraits = ideal_traits.filter((trait: any) => trait.enabled);
      
      if (enabledTraits.length > 0) {
        systemPrompt += `

üéØ CARACTER√çSTICAS DEL CLIENTE IDEAL:
${enabledTraits.map((trait: any, index: number) => `${index + 1}. ${trait.trait}`).join('\n')}

ESTRATEGIA CON CARACTER√çSTICAS:
- Si cumple muchas caracter√≠sticas ‚Üí Sugiere acci√≥n directa (llamada/WhatsApp)
- Si cumple pocas ‚Üí Sugiere acciones para descubrir m√°s caracter√≠sticas
- Si no has confirmado caracter√≠sticas ‚Üí Sugiere preguntas estrat√©gicas para evaluarlas
- Prioriza acciones que te ayuden a calificar al prospecto seg√∫n estas caracter√≠sticas`;
      }
    } else {
      systemPrompt += `

ESTRATEGIA SIN CARACTER√çSTICAS ESPEC√çFICAS:
- Enf√≥cate en construir inter√©s y confianza gradualmente
- Si muestra mucho inter√©s ‚Üí Sugiere llamada o WhatsApp
- Si muestra inter√©s medio ‚Üí Sugiere compartir valor adicional
- Si muestra poco inter√©s ‚Üí Sugiere hacer preguntas para entender necesidades
- Siempre busca oportunidades para avanzar sin presionar`;
    }

    systemPrompt += `

INSTRUCCIONES PARA TU RESPUESTA:
1. Analiza el nivel de inter√©s y engagement del prospecto
2. Considera en qu√© etapa de la conversaci√≥n est√°n
3. Sugiere UNA acci√≥n espec√≠fica y pr√°ctica
4. Explica brevemente POR QU√â esa acci√≥n es la m√°s adecuada ahora
5. Tu respuesta debe ser directa y accionable

FORMATO DE RESPUESTA:
"ACCI√ìN: [descripci√≥n espec√≠fica de qu√© hacer]
RAZ√ìN: [breve explicaci√≥n de por qu√© es el mejor momento para esta acci√≥n]"

Responde SOLO con la acci√≥n sugerida y su justificaci√≥n, sin introducciones adicionales.`;

    const userPrompt = `Analiza esta conversaci√≥n con ${prospect_name} y sugiere la mejor ACCI√ìN ESTRAT√âGICA a tomar:

${conversation}

¬øQu√© acci√≥n espec√≠fica debe tomar el vendedor ahora?`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openai_api_key}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 200,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json()
      console.error('OpenAI API error:', errorData)
      
      return new Response(
        JSON.stringify({ 
          error: 'Error calling OpenAI API',
          details: errorData.error?.message || 'Unknown error'
        }),
        { 
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      )
    }

    const data = await response.json()
    const suggestion = data.choices?.[0]?.message?.content?.trim()

    if (!suggestion) {
      return new Response(
        JSON.stringify({ error: 'No suggestion generated' }),
        { 
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      )
    }

    console.log('‚úÖ Sugerencia de ACCI√ìN generada:', suggestion)

    return new Response(
      JSON.stringify({ 
        suggestion,
        prospect_name 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    )

  } catch (error) {
    console.error('Error in ai-prospect-suggestion:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    )
  }
})
