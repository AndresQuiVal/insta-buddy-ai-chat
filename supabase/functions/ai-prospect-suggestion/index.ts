
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { conversation, prospect_name, openai_api_key, ideal_traits } = await req.json()

    if (!openai_api_key) {
      return new Response(
        JSON.stringify({ error: 'OpenAI API key is required' }),
        { 
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      )
    }

    if (!conversation) {
      return new Response(
        JSON.stringify({ error: 'Conversation is required' }),
        { 
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      )
    }

    console.log('ü§ñ Generando sugerencia estrat√©gica para:', prospect_name)
    console.log('üìù Conversaci√≥n:', conversation)
    console.log('üéØ Caracter√≠sticas recibidas:', ideal_traits)

    // Crear prompt espec√≠fico para sugerencias de ACCIONES estrat√©gicas
    let systemPrompt = `Eres un experto en ventas consultivas y estrategia de conversaci√≥n. Tu objetivo es analizar conversaciones de Instagram y sugerir la ACCI√ìN ESTRAT√âGICA m√°s efectiva que debe tomar la persona de la app.

OBJETIVOS PRINCIPALES:
1. Obtener el n√∫mero de WhatsApp de manera org√°nica
2. Agendar una reuni√≥n/llamada naturalmente  
3. Mantener el inter√©s y construir confianza del prospecto

INSTRUCCIONES PARA SUGERENCIAS DE ACCI√ìN:
- Analiza el nivel de inter√©s y engagement del prospecto
- Sugiere QU√â HACER NEXT (no qu√© decir exactamente)
- Las acciones deben ser graduales y org√°nicas, NO agresivas
- Considera el timing y contexto de la conversaci√≥n
- Enf√≥cate en ESTRATEGIA m√°s que en palabras espec√≠ficas`;

    // Si hay caracter√≠sticas configuradas, a√±adirlas al prompt
    if (ideal_traits && ideal_traits.length > 0) {
      const enabledTraits = ideal_traits.filter((trait: any) => trait.enabled);
      
      if (enabledTraits.length > 0) {
        systemPrompt += `

üéØ CARACTER√çSTICAS DEL CLIENTE IDEAL:
${enabledTraits.map((trait: any, index: number) => `${index + 1}. ${trait.trait}`).join('\n')}

ESTRATEGIA CON CARACTER√çSTICAS:
- Eval√∫a qu√© caracter√≠sticas ya cumple el prospecto bas√°ndose en la conversaci√≥n
- Si cumple las caracter√≠sticas clave, sugiere acciones m√°s directas hacia contacto/reuni√≥n
- Si no las cumple claramente, sugiere acciones para descubrir m√°s informaci√≥n
- Usa las caracter√≠sticas como filtro para determinar el nivel de agresividad de la acci√≥n`;
      }
    } else {
      systemPrompt += `

ESTRATEGIA SIN CARACTER√çSTICAS ESPEC√çFICAS:
- Enf√≥cate en construir rapport y confianza primero
- Sugiere acciones que ayuden a entender mejor al prospecto
- Gradualmente mueve hacia obtener contacto seg√∫n el nivel de inter√©s mostrado`;
    }

    systemPrompt += `

üéØ TIPOS DE ACCIONES ESTRAT√âGICAS A SUGERIR:

üì± ACCIONES DE INFORMACI√ìN:
- "Pregunta sobre [tema espec√≠fico] para entender mejor su situaci√≥n"
- "Comparte una experiencia similar para generar conexi√≥n"
- "Solicita m√°s detalles sobre [aspecto mencionado]"

üìû ACCIONES DE CONEXI√ìN:
- "Sugiere continuar la conversaci√≥n por WhatsApp por comodidad"
- "Prop√≥n una llamada r√°pida para explicar mejor las opciones"
- "Ofrece enviar informaci√≥n m√°s detallada por WhatsApp"

‚è∞ ACCIONES DE TIMING:
- "Espera a que responda antes de hacer m√°s preguntas"
- "Dale tiempo para procesar la informaci√≥n compartida"
- "Retoma la conversaci√≥n ma√±ana con un seguimiento suave"

üí° ACCIONES DE VALOR:
- "Comparte un caso de √©xito similar a su situaci√≥n"
- "Ofrece una consulta gratuita para evaluar su caso"
- "Proporciona un tip √∫til relacionado con su necesidad"

Responde con UNA acci√≥n estrat√©gica espec√≠fica y pr√°ctica, explicando brevemente el PORQU√â de esa acci√≥n.

FORMATO DE RESPUESTA:
üéØ ACCI√ìN RECOMENDADA: [Descripci√≥n clara de qu√© hacer]
üí° RAZ√ìN: [Por qu√© esta acci√≥n es efectiva ahora]
‚è±Ô∏è TIMING: [Cu√°ndo ejecutar esta acci√≥n]`;

    const userPrompt = `Analiza esta conversaci√≥n con ${prospect_name} y sugiere la mejor ACCI√ìN ESTRAT√âGICA:

${conversation}

Sugerencia de acci√≥n:`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openai_api_key}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 200,
        temperature: 0.8,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json()
      console.error('OpenAI API error:', errorData)
      
      return new Response(
        JSON.stringify({ 
          error: 'Error calling OpenAI API',
          details: errorData.error?.message || 'Unknown error'
        }),
        { 
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      )
    }

    const data = await response.json()
    const suggestion = data.choices?.[0]?.message?.content?.trim()

    if (!suggestion) {
      return new Response(
        JSON.stringify({ error: 'No suggestion generated' }),
        { 
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      )
    }

    console.log('‚úÖ Sugerencia estrat√©gica generada:', suggestion)

    return new Response(
      JSON.stringify({ 
        suggestion,
        prospect_name 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    )

  } catch (error) {
    console.error('Error in ai-prospect-suggestion:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    )
  }
})
