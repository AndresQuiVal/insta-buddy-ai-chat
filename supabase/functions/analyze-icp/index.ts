import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    console.log('=== INICIANDO AN√ÅLISIS DE ICP ===');
    
    const requestBody = await req.json();
    console.log('Payload recibido:', JSON.stringify(requestBody, null, 2));
    
    const { prompt } = requestBody;
    
    if (!prompt) {
      console.error('‚ùå No se proporcion√≥ prompt');
      return new Response(
        JSON.stringify({ 
          error: 'Missing prompt',
          response: 'Error: No se proporcion√≥ un prompt para analizar.'
        }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    
    if (!openaiApiKey) {
      console.error('‚ùå OPENAI_API_KEY no est√° configurado');
      return new Response(
        JSON.stringify({ 
          error: 'API key not configured',
          response: JSON.stringify({
            score: 0,
            completedBlocks: [],
            missingBlocks: ["WHO", "WHERE", "BAIT", "RESULT"],
            suggestions: [
              "Configura tu API key de OpenAI en la configuraci√≥n del proyecto",
              "Una vez configurada, podr√°s usar el an√°lisis completo de ICP",
              "Mientras tanto, define manualmente tu cliente ideal"
            ],
            searchKeywords: []
          })
        }),
        { 
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('‚úÖ OpenAI API Key configurada, analizando ICP...');

    // Llamar a OpenAI API para an√°lisis de ICP
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `Eres un experto en marketing y definici√≥n de ICP (Ideal Customer Profile). Tu tarea es analizar descripciones de cliente ideal y evaluar qu√© tan completas est√°n.

IMPORTANTE: Debes responder √öNICAMENTE con JSON v√°lido, sin texto adicional, sin explicaciones, sin markdown.

El JSON debe tener exactamente esta estructura:
{
  "score": [n√∫mero del 0-4],
  "completedBlocks": ["array de bloques completos"],
  "missingBlocks": ["array de bloques faltantes"], 
  "suggestions": ["array de sugerencias"],
  "searchKeywords": ["array de keywords para b√∫squeda"],
  "commentKeywords": ["array de keywords para posts"],
  "accountKeywords": ["array de keywords para cuentas"]
}

Los 4 bloques son: WHO, WHERE, BAIT, RESULT

Si el score es 3 o 4, debes generar keywords espec√≠ficas:
- searchKeywords: hashtags y palabras generales para b√∫squeda (#skincare, belleza, etc.)
- commentKeywords: hashtags espec√≠ficos para encontrar posts con comentarios (#rutinafacial, #glowskin, etc.)
- accountKeywords: tipos de cuentas y nombres espec√≠ficos (@skincare, esteticista, beauty, etc.)

Genera entre 15-25 keywords por categor√≠a, mezclando espa√±ol e ingl√©s, enfoc√°ndote en el nicho espec√≠fico del ICP.`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 800,
        temperature: 0.3
      }),
    });

    console.log('OpenAI Response Status:', openaiResponse.status);

    if (!openaiResponse.ok) {
      const errorData = await openaiResponse.json();
      console.error('‚ùå Error de OpenAI API:', errorData);
      
      // Devolver un an√°lisis b√°sico por defecto en caso de error
      return new Response(
        JSON.stringify({ 
          response: JSON.stringify({
            score: 0,
            completedBlocks: [],
            missingBlocks: ["WHO", "WHERE", "BAIT", "RESULT"],
            suggestions: [
              "Error conectando con OpenAI. Revisa tu API key",
              "Intenta el an√°lisis nuevamente en unos momentos",
              "Mientras tanto, define tu ICP manualmente"
            ],
            searchKeywords: []
          })
        }),
        { 
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    const responseData = await openaiResponse.json();
    console.log('OpenAI Response Data:', responseData);
    
    const generatedResponse = responseData.choices?.[0]?.message?.content;

    if (!generatedResponse) {
      console.error('‚ùå No se pudo generar respuesta de OpenAI');
      return new Response(
        JSON.stringify({ 
          response: JSON.stringify({
            score: 0,
            completedBlocks: [],
            missingBlocks: ["WHO", "WHERE", "BAIT", "RESULT"],
            suggestions: [
              "No se pudo generar an√°lisis autom√°tico",
              "Intenta describir tu ICP de forma m√°s detallada",
              "Incluye informaci√≥n sobre edad, intereses y objetivos"
            ],
            searchKeywords: []
          })
        }),
        { 
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('‚úÖ An√°lisis ICP generado exitosamente');
    console.log('Respuesta:', generatedResponse);

    // Intentar parsear la respuesta como JSON para validarla
    try {
      const parsedResponse = JSON.parse(generatedResponse);
      console.log('‚úÖ JSON v√°lido recibido:', parsedResponse);
      
      return new Response(
        JSON.stringify({ 
          response: generatedResponse,
          success: true
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    } catch (parseError) {
      console.error('‚ùå Error parseando JSON de OpenAI:', parseError);
      console.log('Respuesta que fall√≥:', generatedResponse);
      
      // Devolver an√°lisis b√°sico si el JSON no es v√°lido
      return new Response(
        JSON.stringify({ 
          response: JSON.stringify({
            score: 0,
            completedBlocks: [],
            missingBlocks: ["WHO", "WHERE", "BAIT", "RESULT"],
            suggestions: [
              "Error procesando an√°lisis autom√°tico",
              "Intenta ser m√°s espec√≠fico en tu descripci√≥n",
              "Incluye detalles sobre tu cliente ideal"
            ],
            searchKeywords: []
          })
        }),
        { 
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

  } catch (error) {
    console.error('üí• Error en analyze-icp:', error);
    return new Response(
      JSON.stringify({ 
        response: JSON.stringify({
          score: 0,
          completedBlocks: [],
          missingBlocks: ["WHO", "WHERE", "BAIT", "RESULT"],
          suggestions: [
            "Error interno del sistema",
            "Intenta el an√°lisis nuevamente",
            "Si el problema persiste, contacta soporte"
          ],
          searchKeywords: []
        })
      }),
      { 
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});