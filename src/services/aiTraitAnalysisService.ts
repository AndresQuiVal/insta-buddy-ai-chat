import { supabase } from '@/integrations/supabase/client';
import { analyzeAndUpdateProspect, Trait } from '@/services/prospectAnalysisService';
import { analyzeMessage } from '@/services/messageAnalyzer';
import { IdealTrait } from '@/services/traitService';

interface ConversationMessage {
  id: string;
  text: string;
  sender: 'user' | 'ai';
  timestamp: Date;
}

interface AnalysisResult {
  matchPoints: number;
  metTraits: string[];
}

export const analyzeConversationWithAI = async (
  messages: ConversationMessage[], 
  idealTraits: Trait[]
): Promise<AnalysisResult> => {
  console.log("ü§ñ DEBUG: === AN√ÅLISIS CON IA - SERVICIO ===");
  console.log("üìä DEBUG: Caracter√≠sticas recibidas:", idealTraits);
  console.log("üí¨ DEBUG: Mensajes recibidos:", messages);
  
  const openaiKey = localStorage.getItem('hower-openai-key-demo') || localStorage.getItem('hower-openai-key');
  console.log("üîë DEBUG: OpenAI Key en servicio:", openaiKey ? 'CONFIGURADA' : 'NO CONFIGURADA');
  
  if (!openaiKey) {
    console.log("‚ö†Ô∏è DEBUG: No hay API Key de OpenAI, usando an√°lisis b√°sico");
    return analyzeWithKeywords(messages, idealTraits);
  }

  const enabledTraits = idealTraits.filter(t => t.enabled);
  console.log("üéØ DEBUG: Caracter√≠sticas habilitadas para an√°lisis:", enabledTraits);
  
  if (enabledTraits.length === 0) {
    console.log("‚ö†Ô∏è DEBUG: No hay caracter√≠sticas habilitadas");
    return { matchPoints: 0, metTraits: [] };
  }

  // Crear texto de conversaci√≥n SOLO del usuario
  const userMessages = messages.filter(msg => msg.sender === 'user');
  const conversationText = userMessages.map(msg => msg.text).join('\n');

  console.log("üìù DEBUG: Texto del usuario para IA:", conversationText);

  // PROMPT MEJORADO Y M√ÅS ESPEC√çFICO
  const prompt = `Analiza este mensaje del prospecto y determina qu√© caracter√≠sticas cumple de la lista proporcionada.

MENSAJE DEL PROSPECTO:
"${conversationText}"

CARACTER√çSTICAS DEL CLIENTE IDEAL A EVALUAR:
${enabledTraits.map((trait, i) => `${i + 1}. ${trait.trait}`).join('\n')}

INSTRUCCIONES:
- Analiza √öNICAMENTE el contenido del mensaje del prospecto
- Determina si el mensaje indica que el prospecto cumple con alguna de las caracter√≠sticas listadas
- Busca indicadores directos o indirectos de cada caracter√≠stica
- S√© estricto pero razonable en la evaluaci√≥n

RESPUESTA REQUERIDA:
Responde SOLO con JSON v√°lido en este formato exacto (sin markdown, sin \`\`\`json):
{"characteristics": [n√∫meros de caracter√≠sticas que S√ç cumple], "confidence": 0.8}

Ejemplo: Si cumple las caracter√≠sticas 1 y 3: {"characteristics": [1, 3], "confidence": 0.9}
Si NO cumple ninguna: {"characteristics": [], "confidence": 0}`;

  console.log("üéØ DEBUG: Prompt para OpenAI:", prompt);

  try {
    console.log("üì° DEBUG: Enviando consulta a OpenAI...");
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openaiKey}`,
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'Eres un experto analizador de prospectos de ventas. Tu trabajo es identificar si un mensaje cumple caracter√≠sticas espec√≠ficas del cliente ideal. Responde √öNICAMENTE con JSON v√°lido, sin markdown ni bloques de c√≥digo.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 150,
        temperature: 0.1,
      }),
    });

    console.log("üì® DEBUG: Respuesta HTTP de OpenAI:", response.status, response.statusText);

    if (!response.ok) {
      console.error("‚ùå DEBUG: Error HTTP de OpenAI:", response.status);
      throw new Error(`Error OpenAI: ${response.status}`);
    }

    const data = await response.json();
    console.log("üìã DEBUG: Datos completos de OpenAI:", data);
    
    let content = data.choices?.[0]?.message?.content || '';
    console.log("ü§ñ DEBUG: Contenido de respuesta de OpenAI:", content);

    // LIMPIAR EL CONTENIDO DE MARKDOWN SI EXISTE
    content = content.trim();
    if (content.startsWith('```json')) {
      content = content.replace(/^```json\s*/, '').replace(/\s*```$/, '');
    }
    if (content.startsWith('```')) {
      content = content.replace(/^```\s*/, '').replace(/\s*```$/, '');
    }
    
    console.log("üßπ DEBUG: Contenido limpio para parseo:", content);

    // Parsear respuesta JSON
    const parsed = JSON.parse(content);
    console.log("üîç DEBUG: JSON parseado:", parsed);
    
    const characteristicIndices = parsed.characteristics || [];
    const confidence = parsed.confidence || 0;

    console.log("üìä DEBUG: √çndices de caracter√≠sticas detectadas:", characteristicIndices);

    const metTraits = characteristicIndices
      .map((index: number) => enabledTraits[index - 1]?.trait)
      .filter(Boolean);

    console.log("‚úÖ DEBUG: Caracter√≠sticas finales detectadas:", metTraits);

    const result = {
      matchPoints: metTraits.length,
      metTraits,
      confidence
    };

    console.log("üéØ DEBUG: Resultado final del an√°lisis:", result);
    return result;

  } catch (error) {
    console.error("‚ùå DEBUG: Error en an√°lisis con IA:", error);
    console.log("üîÑ DEBUG: Fallback a an√°lisis por palabras clave");
    return analyzeWithKeywords(messages, idealTraits);
  }
};

// AN√ÅLISIS CON PALABRAS CLAVE COMO FALLBACK
const analyzeWithKeywords = (messages: ConversationMessage[], idealTraits: Trait[]): AnalysisResult => {
  console.log("üî§ DEBUG: === AN√ÅLISIS CON PALABRAS CLAVE ===");
  
  const enabledTraits = idealTraits.filter(t => t.enabled);
  const userMessages = messages.filter(msg => msg.sender === 'user');
  const conversationText = userMessages.map(msg => msg.text).join(' ').toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, ''); // Quitar acentos

  console.log("üìù DEBUG: Texto normalizado para an√°lisis:", conversationText);

  const metTraits: string[] = [];
  
  enabledTraits.forEach(trait => {
    const traitLower = trait.trait.toLowerCase();
    console.log(`üîç DEBUG: Analizando caracter√≠stica: "${trait.trait}"`);
    
    // Extraer palabras clave de la caracter√≠stica misma
    const keywords = traitLower.split(' ').filter(word => word.length > 2);
    
    console.log(`   Palabras clave a buscar:`, keywords);
    
    const hasMatch = keywords.some(keyword => {
      const found = conversationText.includes(keyword);
      if (found) {
        console.log(`‚úÖ DEBUG: Palabra clave encontrada: "${keyword}" en "${trait.trait}"`);
      }
      return found;
    });
    
    if (hasMatch) {
      metTraits.push(trait.trait);
      console.log(`üéØ DEBUG: Caracter√≠stica detectada: ${trait.trait}`);
    } else {
      console.log(`‚ùå DEBUG: NO detectada: ${trait.trait}`);
    }
  });

  const result = {
    matchPoints: metTraits.length,
    metTraits,
    confidence: 0.8
  };

  console.log("üî§ DEBUG: Resultado del an√°lisis por palabras clave:", result);
  return result;
};

export const analyzeAllConversations = async (idealTraits: IdealTrait[]): Promise<void> => {
  console.log("üîç DEBUG: === ANALIZANDO TODAS LAS CONVERSACIONES ===");
  console.log("üéØ DEBUG: Caracter√≠sticas del cliente ideal:", idealTraits);
  
  try {
    const conversationsStr = localStorage.getItem('hower-conversations');
    console.log("üíæ DEBUG: Conversaciones encontradas:", conversationsStr);
    
    if (!conversationsStr) {
      console.log("‚ö†Ô∏è DEBUG: No hay conversaciones para analizar");
      return;
    }

    const conversations = JSON.parse(conversationsStr);
    console.log("üìä DEBUG: N√∫mero de conversaciones a analizar:", conversations.length);
    
    // Array para almacenar los resultados de an√°lisis
    const analysisResults = [];
    
    // Analizar cada conversaci√≥n
    for (const conv of conversations) {
      console.log(`üîç DEBUG: Analizando conversaci√≥n: ${conv.userName || conv.id}`);
      
      try {
        // Obtener todos los mensajes de la conversaci√≥n
        const { data: messages } = await supabase
          .from('instagram_messages')
          .select('*')
          .or(`sender_id.eq.${conv.id},recipient_id.eq.${conv.id}`)
          .order('timestamp', { ascending: true });
        
        if (!messages || messages.length === 0) continue;
        
        // Filtrar solo mensajes recibidos y concatenar su texto
        const conversationText = messages
          .filter(msg => msg.message_type === 'received')
          .map(msg => msg.message_text)
          .join(' ');
        
        if (!conversationText.trim()) continue;
        
        // Analizar la conversaci√≥n completa
        const result = await analyzeAndUpdateProspect(
          conv.id,
          conv.userName,
          conversationText,
          idealTraits
        );
        
        // Guardar resultado con informaci√≥n de la conversaci√≥n
        analysisResults.push({
          id: conv.id,
          userName: conv.userName,
          matchPoints: result.matchPoints,
          metTraits: result.metTraits,
          lastMessage: conv.lastMessage,
          timestamp: conv.timestamp
        });
        
        console.log(`‚úÖ DEBUG: An√°lisis completado para ${conv.userName}:`, {
          matchPoints: result.matchPoints,
          metTraits: result.metTraits
        });
        
      } catch (error) {
        console.error(`‚ùå ERROR analizando conversaci√≥n ${conv.userName}:`, error);
      }
    }
    
    // Ordenar resultados por n√∫mero de caracter√≠sticas cumplidas (descendente)
    analysisResults.sort((a, b) => b.matchPoints - a.matchPoints);
    
    // Actualizar localStorage con los resultados ordenados
    localStorage.setItem('hower-conversations', JSON.stringify(analysisResults));
    
    // Notificar a la UI que los datos han sido actualizados
    window.dispatchEvent(new Event('storage'));
    window.dispatchEvent(new CustomEvent('conversations-updated'));
    
    console.log("‚úÖ DEBUG: An√°lisis completo finalizado. Resultados:", analysisResults);
    
  } catch (error) {
    console.error("‚ùå ERROR en analyzeAllConversations:", error);
    throw error;
  }
};
