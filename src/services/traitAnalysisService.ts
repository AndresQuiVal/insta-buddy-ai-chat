
interface Trait {
  trait: string;
  enabled: boolean;
  position: number;
}

interface AnalysisResult {
  matchPoints: number;
  metTraits: string[];
  metTraitIndices: number[];
}

export const analyzeMessage = async (messageText: string, idealTraits: Trait[]): Promise<AnalysisResult> => {
  if (!messageText || idealTraits.length === 0) {
    return { matchPoints: 0, metTraits: [], metTraitIndices: [] };
  }

  console.log("üîç ANALIZANDO MENSAJE COMPLETO:", messageText.substring(0, 200) + "...");
  
  const enabledTraits = idealTraits.filter(t => t.enabled);
  if (enabledTraits.length === 0) {
    return { matchPoints: 0, metTraits: [], metTraitIndices: [] };
  }

  // Normalizar texto para an√°lisis - M√ÅS SIMPLE Y EFECTIVO
  const conversationText = messageText.toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Quitar acentos
    .trim();
  
  console.log("üìù Texto normalizado para an√°lisis:", conversationText);
  
  // Mapa de palabras clave MEJORADO - M√ÅS ESPEC√çFICO Y DIRECTO
  const keywordMap: Record<string, string[]> = {
    "Interesado en nuestros productos o servicios": [
      // Expresiones de inter√©s directo
      "me interesa", "me interesan", "interesa", "interesan", "interesado", "interesada",
      "me gusta", "me gustan", "me encanta", "me encantan",
      "quiero", "quisiera", "necesito", "busco", "requiero",
      "producto", "servicio", "oferta", "promocion", "paquete",
      "precio", "costo", "cotizacion", "presupuesto",
      "comprar", "adquirir", "contratar",
      // Productos espec√≠ficos
      "crucero", "cruceros", "viaje", "viajes", "tour", "tours",
      "excursion", "excursiones", "vacaciones", "destino", "destinos",
      "turismo", "aventura",
      // Frases completas
      "me interesan los cruceros", "quiero un crucero", "busco cruceros"
    ],
    "Tiene presupuesto adecuado para adquirir nuestras soluciones": [
      "presupuesto", "dinero", "pago", "pagar", "precio", "costo",
      "puedo pagar", "tengo dinero", "dispongo", "cuento con",
      "tarjeta", "efectivo", "financiamiento",
      "mil", "pesos", "dolares", "euros",
      "cuanto cuesta", "cuanto vale", "costoso", "caro", "barato",
      "meses", "cuotas", "mensualidades", "contado"
    ],
    "Est√° listo para tomar una decisi√≥n de compra": [
      "decidido", "decidida", "listo", "lista", "preparado", "preparada",
      "comprar", "reservar", "apartar", "confirmar",
      "ahora", "hoy", "ya", "pronto", "inmediato",
      "cuando", "fecha", "programar", "agendar",
      "perfecto", "de acuerdo", "acepto", "si", "claro", "ok"
    ],
    "Se encuentra en nuestra zona de servicio": [
      "vivo", "estoy", "me encuentro", "ubicado", "radico",
      "direccion", "ciudad", "estado", "zona", "region",
      "mexico", "espa√±a", "guadalajara", "madrid", "barcelona",
      "envio", "entrega", "domicilio", "cerca", "lejos"
    ]
  };
  
  const metTraits: string[] = [];
  const metTraitIndices: number[] = [];
  
  enabledTraits.forEach((trait, idx) => {
    const keywords = keywordMap[trait.trait] || [];
    
    console.log(`üéØ Analizando caracter√≠stica: "${trait.trait}"`);
    console.log(`   Palabras clave: ${keywords.join(', ')}`);
    
    let matchFound = false;
    const foundKeywords: string[] = [];
    
    // B√öSQUEDA M√ÅS SIMPLE Y DIRECTA
    for (const keyword of keywords) {
      // Simplemente verificar si la palabra clave est√° contenida en el texto
      if (conversationText.includes(keyword)) {
        matchFound = true;
        foundKeywords.push(keyword);
        console.log(`   ‚úÖ COINCIDENCIA ENCONTRADA: "${keyword}"`);
      }
    }
    
    console.log(`   Palabras encontradas: ${foundKeywords.join(', ')}`);
    console.log(`   ¬øCoincidencia?: ${matchFound ? '‚úÖ S√ç' : '‚ùå NO'}`);
    
    if (matchFound) {
      metTraits.push(trait.trait);
      metTraitIndices.push(idx);
      console.log(`‚úÖ CARACTER√çSTICA CUMPLIDA: ${trait.trait}`);
    }
  });
  
  const matchPoints = metTraits.length;
  
  console.log("üìä RESULTADO FINAL DEL AN√ÅLISIS:");
  console.log(`   Caracter√≠sticas detectadas: ${metTraits.length}/${enabledTraits.length}`);
  console.log(`   Puntos de compatibilidad: ${matchPoints}`);
  console.log(`   Caracter√≠sticas cumplidas: ${metTraits.join(', ')}`);
  
  return { matchPoints, metTraits, metTraitIndices };
};
