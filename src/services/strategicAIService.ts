
import { toast } from '@/hooks/use-toast';

interface Trait {
  trait: string;
  enabled: boolean;
  position: number;
}

interface AnalysisResult {
  matchPoints: number;
  metTraits: string[];
  metTraitIndices?: number[];
}

interface ChatMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

// Funci√≥n para obtener la API key del localStorage
const getOpenAIKey = (): string => {
  const key = localStorage.getItem('hower-openai-key');
  if (!key) {
    toast({
      title: "API Key requerida",
      description: "Por favor, configura tu API key de OpenAI en Configuraci√≥n",
      variant: "destructive"
    });
    throw new Error('No hay API key de OpenAI configurada');
  }
  return key;
};

/**
 * Carga las caracter√≠sticas ideales desde localStorage
 */
export const loadIdealTraitsFromStorage = (): Trait[] => {
  try {
    const savedTraits = localStorage.getItem('hower-ideal-client-traits');
    if (savedTraits) {
      const parsedTraits = JSON.parse(savedTraits);
      return parsedTraits.map((item: any, index: number) => ({
        trait: item.trait,
        enabled: item.enabled,
        position: index
      }));
    }
  } catch (error) {
    console.error("Error al cargar caracter√≠sticas:", error);
  }

  // Caracter√≠sticas por defecto
  return [
    { trait: "Interesado en nuestros productos o servicios", enabled: true, position: 0 },
    { trait: "Tiene presupuesto adecuado para adquirir nuestras soluciones", enabled: true, position: 1 },
    { trait: "Est√° listo para tomar una decisi√≥n de compra", enabled: true, position: 2 },
    { trait: "Se encuentra en nuestra zona de servicio", enabled: true, position: 3 }
  ];
};

/**
 * Crea un prompt estrat√©gico personalizado basado en las caracter√≠sticas y el progreso actual
 */
export const createStrategicPrompt = (
  idealTraits: Trait[],
  currentAnalysis: AnalysisResult,
  conversationHistory: ChatMessage[],
  userMessage: string
): string => {
  const enabledTraits = idealTraits.filter(t => t.enabled);
  const pendingTraits = enabledTraits.filter(trait => !currentAnalysis.metTraits.includes(trait.trait));
  const nextTrait = pendingTraits[0]; // Pr√≥xima caracter√≠stica a descubrir

  console.log("üéØ CREANDO PROMPT ESTRAT√âGICO:");
  console.log(`üìä Progreso: ${currentAnalysis.matchPoints}/${enabledTraits.length} caracter√≠sticas`);
  console.log(`‚úÖ Cumplidas: ${currentAnalysis.metTraits.join(', ')}`);
  console.log(`üéØ Pr√≥ximo objetivo: ${nextTrait?.trait || 'CONSEGUIR CONTACTO'}`);

  return `Eres Mar√≠a, una asesora de viajes experta y vendedora estrat√©gica. Tu misi√≥n es tener conversaciones NATURALES pero con un objetivo claro: descubrir si el prospecto cumple las caracter√≠sticas del cliente ideal.

üéØ CARACTER√çSTICAS DEL CLIENTE IDEAL A EVALUAR:
${enabledTraits.map((trait, i) => `${i + 1}. ${trait.trait}`).join('\n')}

üìä PROGRESO ACTUAL DEL PROSPECTO:
- ‚úÖ CARACTER√çSTICAS CONFIRMADAS: ${currentAnalysis.matchPoints}/${enabledTraits.length}
- ‚úÖ YA CUMPLE: ${currentAnalysis.metTraits.length > 0 ? currentAnalysis.metTraits.join(' | ') : 'NINGUNA A√öN'}
- üéØ PR√ìXIMO OBJETIVO: ${nextTrait ? `"${nextTrait.trait}"` : 'CONSEGUIR CONTACTO/WHATSAPP'}
- üîç PENDIENTES: ${pendingTraits.length > 0 ? pendingTraits.map(t => t.trait).join(' | ') : 'TODAS COMPLETADAS'}

üó£Ô∏è ESTRATEGIA CONVERSACIONAL SEG√öN PROGRESO:

${currentAnalysis.matchPoints === 0 ? `
üåü ETAPA INICIAL - Crear conexi√≥n + primer filtrado
- Responde de forma aut√©ntica y emp√°tica al mensaje del usuario
- Crea RAPPORT y muestra inter√©s genuino en lo que dice
- Incluye UNA pregunta estrat√©gica que pueda revelar: "${nextTrait?.trait}"
- La pregunta debe ser NATURAL, no obvia
- EJEMPLO para descubrir inter√©s: "¬øQu√© tipo de experiencias de viaje te emocionan m√°s?"
- EJEMPLO para descubrir presupuesto: "¬øHas hecho alg√∫n viaje especial √∫ltimamente?"
` : currentAnalysis.matchPoints < enabledTraits.length ? `
üí¨ FILTRADO ACTIVO - Conversaci√≥n dirigida
- Progreso: ${currentAnalysis.matchPoints}/${enabledTraits.length} caracter√≠sticas confirmadas
- Responde emp√°ticamente a su mensaje actual
- ENF√ìCATE en descubrir: "${nextTrait?.trait}"
- Haz preguntas de seguimiento que conecten con sus respuestas
- Cada mensaje debe tener una pregunta estrat√©gica para la caracter√≠stica pendiente
- S√© emp√°tico pero mant√©n el objetivo claro

EJEMPLOS seg√∫n la caracter√≠stica a descubrir:
* Para "presupuesto": "¬øQu√© inversi√≥n consideras razonable para una experiencia inolvidable?"
* Para "inter√©s": "¬øQu√© es lo que m√°s te atrae de esta idea?"
* Para "ubicaci√≥n": "¬øDesde qu√© parte del pa√≠s nos escribes?"
* Para "decisi√≥n": "¬øEres de los que cuando algo les convence act√∫an r√°pido?"
` : `
üèÜ CLIENTE IDEAL CONFIRMADO - Conseguir contacto
- ¬°EXCELENTE! Este prospecto cumple TODAS las ${enabledTraits.length} caracter√≠sticas
- AHORA tu objetivo es conseguir WhatsApp o agendar una llamada
- S√© m√°s directo: "Me parece que tenemos la opci√≥n perfecta para ti, ¬øte gustar√≠a que habl√°ramos por WhatsApp?"
- Ofrece valor espec√≠fico: "Tengo algunas propuestas que creo te van a encantar"
- Crea urgencia suave: "¬øTe parece si coordinamos una llamada esta semana?"
`}

üí¨ MENSAJE ACTUAL DEL USUARIO:
"${userMessage}"

üé≠ REGLAS PARA TU RESPUESTA:
1. **Responde de forma emp√°tica** al mensaje actual del usuario
2. **Construye sobre lo que dice** - demuestra que escuchas
3. **Incluye UNA pregunta estrat√©gica** relacionada con la caracter√≠stica pendiente
4. **Mant√©n el tono conversacional** - no parezcas un interrogatorio
5. **Justifica tus preguntas** con curiosidad personal o experiencia
6. **NO reveles que est√°s evaluando caracter√≠sticas** espec√≠ficas
7. **M√°ximo 2-3 oraciones** - s√© concisa pero efectiva

RESPONDE COMO MAR√çA, de forma natural pero estrat√©gica, enfoc√°ndote en descubrir la siguiente caracter√≠stica.`;
};

/**
 * Genera una respuesta estrat√©gica usando OpenAI basada en las caracter√≠sticas ideales
 */
export const generateStrategicResponse = async (
  userMessage: string,
  conversationHistory: ChatMessage[],
  currentAnalysis: AnalysisResult = { matchPoints: 0, metTraits: [], metTraitIndices: [] }
): Promise<string> => {
  try {
    console.log("ü§ñ GENERANDO RESPUESTA ESTRAT√âGICA:");
    console.log(`üí¨ Mensaje usuario: "${userMessage}"`);
    console.log(`üìä An√°lisis actual:`, currentAnalysis);

    const apiKey = getOpenAIKey();
    const idealTraits = loadIdealTraitsFromStorage();
    const enabledTraits = idealTraits.filter(t => t.enabled);

    if (enabledTraits.length === 0) {
      console.log("‚ö†Ô∏è No hay caracter√≠sticas habilitadas, respuesta gen√©rica");
      return "¬°Hola! Gracias por contactarme. ¬øEn qu√© puedo ayudarte hoy?";
    }

    // Crear prompt estrat√©gico personalizado
    const systemPrompt = createStrategicPrompt(idealTraits, currentAnalysis, conversationHistory, userMessage);

    const messages: ChatMessage[] = [
      { role: 'system', content: systemPrompt },
      ...conversationHistory.slice(-6), // Solo √∫ltimos 6 mensajes para contexto
      { role: 'user', content: userMessage }
    ];

    console.log("üì§ Enviando a OpenAI con prompt estrat√©gico...");

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages,
        temperature: 0.8, // M√°s creativo para conversaciones naturales
        max_tokens: 200, // Respuestas concisas
      })
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`Error en la API de OpenAI: ${error}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    console.log("‚úÖ Respuesta estrat√©gica generada:", aiResponse);

    // Verificar que no sea una respuesta gen√©rica
    const genericPhrases = ['interesante', 'cu√©ntame m√°s', 'qu√© bien'];
    if (genericPhrases.some(phrase => aiResponse.toLowerCase().includes(phrase))) {
      console.log("‚ö†Ô∏è Respuesta demasiado gen√©rica detectada");
      
      // Respuesta de emergencia seg√∫n el progreso
      const pendingTraits = enabledTraits.filter(trait => !currentAnalysis.metTraits.includes(trait.trait));
      const nextTrait = pendingTraits[0];
      
      if (nextTrait) {
        return `Gracias por compartir eso conmigo. Me da curiosidad, ${nextTrait.trait.toLowerCase().includes('presupuesto') ? '¬øqu√© tipo de inversiones has hecho √∫ltimamente?' : '¬øpodr√≠as contarme un poco m√°s sobre lo que buscas?'}`;
      }
    }

    return aiResponse;

  } catch (error) {
    console.error('‚ùå Error al generar respuesta estrat√©gica:', error);
    
    // Respuesta de fallback
    if (error instanceof Error && error.message.includes('No hay API key')) {
      return "‚ö†Ô∏è API Key de OpenAI no configurada. Ve a Configuraci√≥n para agregarla.";
    }
    
    return "Gracias por tu mensaje. ¬øPodr√≠as contarme un poco m√°s sobre lo que buscas?";
  }
};

/**
 * Obtiene el an√°lisis actual de un prospecto desde localStorage
 */
export const getCurrentProspectAnalysis = (senderId: string): AnalysisResult => {
  try {
    const conversationsStr = localStorage.getItem('hower-conversations');
    if (conversationsStr) {
      const conversations = JSON.parse(conversationsStr);
      const prospect = conversations.find((conv: any) => 
        conv.id === senderId || conv.senderId === senderId
      );
      
      if (prospect) {
        return {
          matchPoints: prospect.matchPoints || 0,
          metTraits: prospect.metTraits || [],
          metTraitIndices: prospect.metTraitIndices || []
        };
      }
    }
  } catch (error) {
    console.error("Error al obtener an√°lisis actual:", error);
  }
  
  return { matchPoints: 0, metTraits: [], metTraitIndices: [] };
};
